@startuml Coinbase Overlay Node Service
skinparam backgroundColor #F0F8FF
skinparam defaultFontColor #333333
skinparam arrowColor #666666

' Define borders for all elements
skinparam entity {
  BorderColor #666666
  BackgroundColor #DDDDDD
}

skinparam control {
  BorderColor #666666
  BackgroundColor #DDDDDD
}

skinparam participant {
  BorderColor #666666
  BackgroundColor #DDDDDD
}



actor TxBlaster
entity Node
entity Bootstrap
entity CON
database Store

CON -> Bootstrap: Discover
note right
  CON requests a list of Nodes to connect to (alt: just use a list of nodes)
end note

CON -> Node: Connect
note right
  CON connects to the neighboring nodes
end note
CON -> Node: Get best block
note right
  Get the latest block from the network
end note
CON -> Node: Synchronize
note right
  If there are any blocks in the db and the DB chain tip isn't the best block we just
  recieved then get previous block and repeat until we have the DB chain tip block
end note

CON -> Node: Subscribe
note right
  CON could listen to the network for new blocks rather than subscribing to a node
end note

loop For each new block
  Node -> CON: New Block Notification
  CON -> Node: Get Block
  CON -> CON: Parse Block
  CON -> Store: Store Block and coinbase UTXOs
note right
  <b>Database Schema</b>
  <code>
  Block
  --------------------------------
  ID              uint (ORM)
  CreatedAt       time (ORM)
  UpdatedAt       time (ORM)
  Height          uint64
  Block hash      string/hex encoded
  Prev block hash string/hex encoded
  --------------------------------

  <b>Note</b>: Fork awareness is achieved by identifying the entries
  which poin to the previous block hash more than once.

  <code>
  Coinbase UTXO
  --------------------------------
  ID        uint (ORM)
  CreatedAt time (ORM)
  UpdatedAt time (ORM)
  Txid      string
  Vout      uint32
  Script    string
  Amount    uint64
  Address   string/base58 encoded
  Spent     bool
  --------------------------------

end note
end

group Blast
TxBlaster -> CON: GetUTXOs (pubkey, amount)
CON -> Store: Get UTXOs
note right
  <b>Note</b>:
  Respnse to GetUTXOs should include various combinations of UTXOs that satisfy
  the condition to be equal or greater than the amount, by returning various combinations
  of UTXOs from the smallest number of inputs with the highest amount of Satoshis to
  exact amount of satoshis with the highest number of inputs to satisfy the amount.
end note
Store -> CON: Return UTXOs
note right
  <b>Note</b>: Return combinations:
  Lowest number of inputs with the highest amount of satoshis to the highest number of
  inputs with the exact or higher amount of satoshis.
  The logic solves the combination problem of finding the optimal number of inputs to
  satisfy the condition to be equal or greater than the amount of satoshis.
end note
CON -> TxBlaster: Return UTXOs

TxBlaster -> TxBlaster: Create Transaction

TxBlaster -> CON: SubmitTransaction
CON -> Node: Submit Transaction
note right
  CON may want to poll or listen for tx confirmation
end note
CON -> Store: Mark UTXOs as spent
end




@enduml
