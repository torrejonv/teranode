skinparam defaultTextAlignment center
skinparam rectangle {
  BackgroundColor #e6f0ff
  BorderColor #3366cc
  FontColor black
  RoundCorner 10
}
skinparam component {
  BackgroundColor #e6f0ff
  BorderColor #3366cc
  FontColor black
  RoundCorner 10
}
skinparam database {
  BackgroundColor #f2f2f2
  BorderColor #999999
  FontColor black
  RoundCorner 10
}
skinparam shadowing false
skinparam ArrowColor #666666




@startuml Validator_Component
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Validator Service - Component Diagram

Container_Boundary(validator, "Validator Service") {
    Component(grpc_server, "gRPC Server", "Go gRPC", "Handles external validation API requests")
    Component(http_server, "HTTP Server", "Go HTTP", "Alternative HTTP API for validation requests")

    Component(tx_validator, "Transaction Validator", "Go", "Core transaction validation logic with script interpreter")
    Component(batch_processor, "Batch Processor", "Go", "Handles batched transaction validation for performance")
    Component(size_router, "Size Router", "Go", "Routes large transactions via HTTP, small via Kafka")

    Component(kafka_producer_txmeta, "TxMeta Kafka Producer", "Go Kafka", "Publishes transaction metadata")
    Component(kafka_producer_rejected, "Rejected Tx Kafka Producer", "Go Kafka", "Publishes rejected transaction notifications")
    Component(kafka_consumer, "Kafka Consumer", "Go Kafka", "Consumes validation requests from Propagation")

    Component(block_assembly_client, "Block Assembly Client", "Go gRPC", "Forwards valid transactions to Block Assembly")
    Component(metrics_collector, "Metrics Collector", "Prometheus", "Collects validation performance metrics")
    Component(health_monitor, "Health Monitor", "Go", "Monitors service health and dependencies")
}

Container_Boundary(external_services, "External Services") {
    Container(propagation, "Propagation Service", "Go", "Transaction propagation")
    Container(block_assembly, "Block Assembly Service", "Go", "Block assembly")
    Container(subtree_validation, "Subtree Validation Service", "Go", "Subtree validation")
    Container(p2p, "P2P Service", "Go", "P2P communication")
    Container(utxo_store, "UTXO Store", "Database", "UTXO management")
    Container(blockchain, "Blockchain Service", "Go", "Blockchain state")
    ContainerQueue(kafka, "Kafka", "Message Queue", "Message broker")
}

Person(client, "Client", "External application")

' External API interactions
Rel(client, grpc_server, "Validation requests", "gRPC")
Rel(client, http_server, "Validation requests", "HTTP")
Rel(propagation, grpc_server, "Transaction validation", "gRPC")
Rel(kafka, kafka_consumer, "Validation requests", "Kafka")

' Internal component interactions
Rel(grpc_server, batch_processor, "Batch validation requests")
Rel(http_server, batch_processor, "Individual validation requests")
Rel(kafka_consumer, batch_processor, "Kafka validation requests")
Rel(batch_processor, tx_validator, "Core validation")
Rel(batch_processor, size_router, "Route by transaction size")

' Output routing
Rel(size_router, block_assembly_client, "Valid transactions (direct)", "gRPC")
Rel(size_router, kafka_producer_txmeta, "Transaction metadata", "Kafka")
Rel(size_router, kafka_producer_rejected, "Rejected transactions", "Kafka")

' External service interactions
Rel(block_assembly_client, block_assembly, "Store valid transactions", "gRPC")
Rel(kafka_producer_txmeta, kafka, "Publish metadata", "Kafka")
Rel(kafka_producer_rejected, kafka, "Publish rejections", "Kafka")
Rel(kafka, subtree_validation, "Transaction metadata", "Kafka")
Rel(kafka, p2p, "Rejection notifications", "Kafka")

' Storage and state interactions
Rel(tx_validator, utxo_store, "UTXO validation/creation", "gRPC")
Rel(tx_validator, blockchain, "Block height/chain state", "gRPC")

' Monitoring
Rel(batch_processor, metrics_collector, "Validation metrics")
Rel(tx_validator, metrics_collector, "Performance metrics")
Rel(health_monitor, utxo_store, "Health checks")
Rel(health_monitor, blockchain, "Health checks")

SHOW_LEGEND()
@enduml
