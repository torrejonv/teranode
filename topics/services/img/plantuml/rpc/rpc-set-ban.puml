@startuml
skinparam backgroundColor #F0F8FF
skinparam defaultFontColor #333333
skinparam arrowColor #666666

' Define borders for all elements
skinparam entity {
  BorderColor #666666
  BackgroundColor #DDDDDD
}

skinparam control {
  BorderColor #666666
  BackgroundColor #DDDDDD
}

skinparam participant {
  BorderColor #666666
  BackgroundColor #DDDDDD
}



participant Client
participant "RPC Server" as RPC
participant "P2P Service" as P2P
participant "Ban List" as BanList

Client -> RPC : SetBanCmd(ipOrSubnet, command, bantime, absolute)
activate RPC

RPC -> P2P : GetBanList(ctx)
activate P2P

alt Ban List Retrieval Fails
    P2P --> RPC : Return error
    RPC -> Client : Return error
else Ban List Retrieved
    P2P --> RPC : Return ban list
    deactivate P2P

    alt Invalid IP/Subnet
        RPC -> Client : Return error
        note right
            Error response:
            - Code: ErrRPCInvalidParameter
            - Message: "IPOrSubnet is required"
        end note
    else Valid IP/Subnet
        alt command = "add"
            RPC -> RPC : Calculate expiration time
            note right
                If bantime = 0:
                    Set 24-hour default
                If absolute = true:
                    Use bantime as timestamp
                Else:
                    Add bantime to current time
            end note

            RPC -> BanList : Add(ctx, ipOrSubnet, expirationTime)
            activate BanList

            alt Add Operation Fails
                BanList --> RPC : Return error
                RPC -> Client : Return error
                note right
                    Error response:
                    - Code: ErrRPCInvalidParameter
                    - Message: "Failed to add ban"
                end note
            else Add Operation Succeeds
                BanList --> RPC : Return success
                RPC -> Client : Return nil
                note right
                    Response fields:
                    - Returns nil on success

                    Effects:
                    - IP/subnet added to ban list
                    - Connections from banned IPs rejected
                    - Ban expires after specified time
                end note
            end

        else command = "remove"
            RPC -> BanList : Remove(ctx, ipOrSubnet)

            alt Remove Operation Fails
                BanList --> RPC : Return error
                RPC -> Client : Return error
                note right
                    Error response:
                    - Code: ErrRPCInvalidParameter
                    - Message: "Failed to remove ban"
                end note
            else Remove Operation Succeeds
                BanList --> RPC : Return success
                RPC -> Client : Return nil
                note right
                    Response fields:
                    - Returns nil on success

                    Effects:
                    - IP/subnet removed from ban list
                    - Connections from IP allowed (if no other bans)
                end note
            end

        else Invalid Command
            RPC -> Client : Return error
            note right
                Error response:
                - Code: ErrRPCInvalidParameter
                - Message: "Invalid command. Must be 'add' or 'remove'."
            end note
        end
        deactivate BanList
    end
end

deactivate RPC

left footer Last Modified On: %date("dd-MMM-yyyy")
@enduml
