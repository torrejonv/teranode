skinparam defaultTextAlignment center
skinparam rectangle {
  BackgroundColor #e6f0ff
  BorderColor #3366cc
  FontColor black
  RoundCorner 10
}
skinparam component {
  BackgroundColor #e6f0ff
  BorderColor #3366cc
  FontColor black
  RoundCorner 10
}
skinparam database {
  BackgroundColor #f2f2f2
  BorderColor #999999
  FontColor black
  RoundCorner 10
}
skinparam shadowing false
skinparam ArrowColor #666666

@startuml UTXO_Store_Component

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title UTXO Store - Component Diagram

Container_Boundary(utxo_store, "UTXO Store System") {

Component(store_interface, "Store Interface", "Go Interface", "Defines UTXO store operations: Get, Create, Spend, Unspend")

Component(factory, "Store Factory", "Go", "Creates store instances based on configuration")



Component(memory_impl, "Memory Implementation", "Go", "In-memory UTXO storage with concurrent access and block height tracking")

Component(aerospike_impl, "Aerospike Implementation", "Go", "High-performance NoSQL storage with Lua scripts for atomic operations")

Component(sql_impl, "SQL Implementation", "Go", "Relational database storage for PostgreSQL and SQLite")

Component(null_impl, "Null Implementation", "Go", "No-op implementation for testing and benchmarking")



Component(get_batcher, "Get Batcher", "Go", "Batches UTXO retrieval operations for performance")

Component(spend_batcher, "Spend Batcher", "Go", "Batches UTXO spending operations for performance")

Component(unspendable_batcher, "Unspendable Batcher", "Go", "Batches unspendable marking operations")



Component(alert_manager, "Alert Manager", "Go", "Handles UTXO freezing, unfreezing, and reassignment")

Component(freeze_component, "Freeze Component", "Go", "Implements UTXO freezing logic with court order support")

Component(reassign_component, "Reassign Component", "Go", "Implements UTXO reassignment for legal recovery")



Component(external_storage_manager, "External Storage Manager", "Go", "Manages large transaction data in external files")

Component(pagination_manager, "Pagination Manager", "Go", "Handles large transactions with many outputs")

Component(status_manager, "Status Manager", "Go", "Manages UTXO status: OK, SPENT, FROZEN, CONFLICTING, etc.")



Component(aerospike_client, "Aerospike Client", "Aerospike Go", "Aerospike database client with connection pooling")

Component(lua_script_manager, "Lua Script Manager", "Aerospike Lua", "Manages Lua scripts for atomic operations")

Component(sql_driver, "SQL Driver", "Go database/sql", "PostgreSQL and SQLite database drivers")

Component(memory_manager, "Memory Manager", "Go sync", "Concurrent in-memory UTXO management")



Component(dah_manager, "DAH Manager", "Go", "Delete-After-Height management for external storage")

Component(metrics_collector, "Metrics Collector", "Prometheus", "Collects operation metrics and performance counters")

Component(logger_component, "Logger Component", "Go", "Operation logging and audit trail generation")

Component(health_checker, "Health Checker", "Go", "Health check implementation for store backends")

}

Container_Boundary(external_storage, "External Storage") {

ComponentDb(aerospike_database, "Aerospike Database", "Aerospike", "High-performance NoSQL database")

ComponentDb(postgresql_database, "PostgreSQL Database", "PostgreSQL", "Relational database backend")

ComponentDb(sqlite_database, "SQLite Database", "SQLite", "Lightweight database backend")

ComponentDb(memory_storage, "Memory Storage", "RAM", "In-memory storage")

ComponentDb(file_system, "File System", "Filesystem", "External transaction data files")

}

Container_Boundary(monitoring, "Monitoring & Observability") {

Component(prometheus_metrics, "Prometheus Metrics", "Prometheus", "UTXO operation metrics")

Component(tracing_component, "Tracing Component", "OpenTelemetry", "Distributed tracing")

Component(audit_logger, "Audit Logger", "Logging", "Audit trail for legal compliance")

}

Container_Boundary(legal_compliance, "Legal & Compliance") {

Component(court_order_processor, "Court Order Processor", "Go", "Processes legal freeze/reassign orders")

Component(compliance_reporter, "Compliance Reporter", "Go", "Reports compliance data")

}

' Core interface relationships

Rel(store_interface, factory, "Created by", "Configuration-based instantiation")

Rel(factory, memory_impl, "Creates", "Memory store instances")

Rel(factory, aerospike_impl, "Creates", "Aerospike store instances")

Rel(factory, sql_impl, "Creates", "SQL store instances")

Rel(factory, null_impl, "Creates", "Null store instances")

' Implementation to backend relationships

Rel(memory_impl, memory_manager, "Uses", "Concurrent access control")

Rel(aerospike_impl, aerospike_client, "Uses", "Database operations")

Rel(aerospike_impl, lua_script_manager, "Uses", "Atomic operations")

Rel(sql_impl, sql_driver, "Uses", "Database queries")

' Batch processing relationships

Rel(store_interface, get_batcher, "Enhanced by", "Batch retrieval")

Rel(store_interface, spend_batcher, "Enhanced by", "Batch spending")

Rel(store_interface, unspendable_batcher, "Enhanced by", "Batch marking")

' Alert system relationships

Rel(store_interface, alert_manager, "Enhanced by", "Alert system features")

Rel(alert_manager, freeze_component, "Uses", "UTXO freezing")

Rel(alert_manager, reassign_component, "Uses", "UTXO reassignment")

Rel(freeze_component, court_order_processor, "Receives from", "Legal orders")

' Storage management relationships

Rel(store_interface, external_storage_manager, "Uses", "Large data management")

Rel(store_interface, pagination_manager, "Uses", "Large transaction handling")

Rel(store_interface, status_manager, "Uses", "Status management")

Rel(external_storage_manager, dah_manager, "Uses", "Retention policies")

' Database backend relationships

Rel(memory_impl, memory_storage, "Stores in", "Direct memory access")

Rel(aerospike_impl, aerospike_database, "Stores in", "Aerospike protocol")

Rel(sql_impl, postgresql_database, "Stores in", "SQL queries")

Rel(sql_impl, sqlite_database, "Stores in", "SQL queries")

Rel(external_storage_manager, file_system, "Stores in", "File operations")

' Monitoring relationships

Rel(store_interface, metrics_collector, "Reports to", "Metrics collection")

Rel(store_interface, logger_component, "Logged by", "Operation logging")

Rel(store_interface, health_checker, "Checked by", "Health monitoring")

Rel(metrics_collector, prometheus_metrics, "Exports to", "Metrics system")

Rel(logger_component, audit_logger, "Sends to", "Audit trails")

Rel(store_interface, tracing_component, "Traced by", "Operation tracing")

' Compliance relationships

Rel(alert_manager, compliance_reporter, "Reports to", "Compliance data")

@enduml