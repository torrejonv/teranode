@startuml
skinparam backgroundColor #F0F8FF
skinparam defaultFontColor #333333
skinparam arrowColor #666666

' Define borders for all elements
skinparam entity {
  BorderColor #666666
  BackgroundColor #DDDDDD
}

skinparam control {
  BorderColor #666666
  BackgroundColor #DDDDDD
}

skinparam participant {
  BorderColor #666666
  BackgroundColor #DDDDDD
}



participant "SubtreeProcessor" as SubtreeProc
queue "Queue" as TxQueue
entity "Current SubTree" as currentSubtree
participant "Block Assembly Server" as Server
participant "SubtreeStore" as Store
participant "BlockchainClient" as Blockchain
database "Remove Map" as RemoveMap

loop
    TxQueue -> SubtreeProc : txReq = queue.dequeue(validFromMillis)
    SubtreeProc -> RemoveMap : Exists(txReq.node.Hash)
    alt if not in RemoveMap
        SubtreeProc -> SubtreeProc : addNode(txReq.node, false)
        activate SubtreeProc
        SubtreeProc -> currentSubtree : AddSubtreeNode(txReq.node)
        SubtreeProc -> currentSubtree : IsComplete()
        currentSubtree --> SubtreeProc : true / false

        alt if Subtree is Complete
            SubtreeProc -> Server : Send currentSubtree \nthrough newSubtreeChan
            deactivate SubtreeProc
            activate Server
            Server -> Store : Exists(ctx, subtree.RootHash()[:])
            Store --> Server : Exists / not exists

            alt if Subtree does not exist
                Server -> Store : Set(ctx, subtree.RootHash()[:], subtreeBytes, options.WithTTL(subtreeTTL))
                alt if Set fails
                    Server -> Server : Add to subtreeRetryChan for later retry
                else if Set succeeds
                    Server -> Blockchain : SendNotification(ctx, &blockchain.Notification{Type: NotificationType_Subtree, ...})
                end
            end
        end
    else if in RemoveMap
        SubtreeProc -> RemoveMap : Delete(txReq.node.Hash)
    end
end

left footer Last Modified On: %date("dd-MMM-yyyy")

@enduml
