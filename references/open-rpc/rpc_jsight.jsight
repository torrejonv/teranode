# Bitcoin SV Teranode RPC API

JSIGHT 0.3

INFO
  Title "Bitcoin SV Teranode RPC API"
  Version "1.0.0"
  Description
    ## Overview

    JSON-RPC interface for interacting with the Bitcoin SV Teranode node. This API provides compatibility with the Bitcoin RPC interface, allowing clients to interact with the Teranode node using standard Bitcoin RPC commands.

  Contact {
    name "Bitcoin SV Teranode Team"
  }

# Common Types

TYPE @BlockHeader // Block header information
{
  "hash": "00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09", // The block hash
  "confirmations": 1000, // The number of confirmations
  "size": 43560, // The block size
  "height": 1000, // The block height
  "version": 1, // The block version
  "versionHex": "00000001", // The block version in hexadecimal
  "merkleroot": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33", // The merkle root
  "time": 1232346882, // The block time
  "mediantime": 1232344831, // The median time
  "nonce": 2595206198, // The nonce
  "bits": "1d00ffff", // The bits
  "difficulty": 1, // The difficulty
  "chainwork": "000000000000000000000000000000000000000000000000000000000100010001", // The chainwork
  "previousblockhash": "0000000000001937493db09aee5445d95cbde3e80b1e78b833a962391893f1e1", // The hash of the previous block
  "nextblockhash": "000000008b896e272758da5297bcd98fdc6d97c9b765ecec401e286dc1fdbe10" // The hash of the next block
}

TYPE @RawTransaction // Raw transaction information
{
  "txid": "5b2a3f53f605d62c53e62932dac6925e3d74afa5a98f57cc25d3f1a7cdac4c2c", // The transaction ID
  "version": 2, // The transaction version
  "locktime": 0, // The lock time
  "vin": [ // The transaction inputs
    {
      "txid": "f34e1c37e737715e5455bbed50b3820a1f61ed4486c679a99ffb67e9592f9e54", // The transaction ID
      "vout": 0, // The output number
      "scriptSig": { // The signature script
        "asm": "304502210086e15c7c2f32407cc8a0ed7e27b3912bb6b02460626ce9ede1baccd41561b64702206ef3fe1e0b4f1a66f08d4fae9d0e927b17857d3819a0a0aab43d1a4c1607981e01", // The signature script in assembly format
        "hex": "48304502210086e15c7c2f32407cc8a0ed7e27b3912bb6b02460626ce9ede1baccd41561b64702206ef3fe1e0b4f1a66f08d4fae9d0e927b17857d3819a0a0aab43d1a4c1607981e01" // The signature script in hexadecimal format
      },
      "sequence": 4294967295 // The sequence number
    }
  ],
  "vout": [ // The transaction outputs
    {
      "value": 0.00770000, // The value in BSV
      "n": 0, // The index
      "scriptPubKey": { // The public key script
        "asm": "OP_DUP OP_HASH160 8c0da4862ca29977a9c96b372be17276d886b236 OP_EQUALVERIFY OP_CHECKSIG", // The public key script in assembly format
        "hex": "76a9148c0da4862ca29977a9c96b372be17276d886b23688ac", // The public key script in hexadecimal format
        "address": "1DVhaBdbp5mx5Y8zR1qR9NBiQtrgL9ZNQs", // The Bitcoin SV address
        "type": "pubkeyhash" // The type
      }
    }
  ]
}

TYPE @TxIn // Transaction input
{
  "txid": "f34e1c37e737715e5455bbed50b3820a1f61ed4486c679a99ffb67e9592f9e54", // The transaction ID
  "vout": 0 // The output number
}

TYPE @TxOut // Transaction output
{
  "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa": 0.01 // The recipient address and the amount in BSV
}

TYPE @BlockchainInfo // Blockchain information
{
  "chain": "main", // The name of the chain (main, test, regtest)
  "blocks": 680000, // The number of blocks
  "headers": 680000, // The number of headers
  "bestblockhash": "000000000000000000035c80f3a4414b6da66e9ef98f8122e89691d8c6d2cbe0", // The hash of the best block
  "difficulty": 21865558044610.55, // The current difficulty
  "mediantime": 1620374451, // The median time
  "verificationprogress": 0.9999953, // The verification progress
  "initialblockdownload": false, // Whether the node is in initial block download
  "chainwork": "00000000000000000000000000000000000000001f6a65c7cd10e5491b7b7501", // The chainwork
  "pruned": false // Whether the node is pruned
}

TYPE @NodeInfo // Node information
{
  "version": 100000, // The server version
  "protocolversion": 70015, // The protocol version
  "blocks": 680000, // The number of blocks
  "timeoffset": 0, // The time offset
  "connections": 8, // The number of connections
  "proxy": "", // The proxy used
  "difficulty": 21865558044610.55, // The current difficulty
  "testnet": false, // Whether the node is on testnet
  "relayfee": 0.00001, // The minimum relay fee
  "errors": "" // Any current errors
}

TYPE @PeerInfo // Peer information
{
  "id": 3, // The peer ID
  "addr": "192.168.1.113:8333", // The IP address and port
  "addrlocal": "192.168.0.2:51624", // The local IP address and port
  "services": "000000000000000d", // The services
  "lastsend": 1622802552, // The time of the last send
  "lastrecv": 1622802552, // The time of the last receive
  "bytessent": 368763, // The number of bytes sent
  "bytesrecv": 9380352, // The number of bytes received
  "conntime": 1614783911, // The connection time
  "timeoffset": 0, // The time offset
  "pingtime": 0.000631, // The ping time
  "minping": 0.000454, // The minimum ping time
  "version": 70015, // The version
  "subver": "/Bitcoin SV:1.0.7/", // The user agent
  "inbound": false, // Whether the connection is inbound
  "startingheight": 675294, // The starting height
  "banscore": 0, // The ban score
  "synced_headers": 680000, // The number of synced headers
  "synced_blocks": 680000 // The number of synced blocks
}

# RPC Methods

URL /rpc
  Protocol json-rpc-2.0

  # Node Control Commands

  Method stop // Stops the node.
    Params
      []
    Result
      "Teranode server stopping" // A message indicating the node is stopping

  Method version // Returns version information about the server.
    Params
      []
    Result
      {
        "version": "0.22.1", // Server version string (Major.Minor.Patch)
        "subversion": "/Teranode:0.22.1/", // User agent string in Bitcoin standard format
        "protocolversion": 70016, // Protocol version number for P2P communications
        "commit": "abc123def", // Git commit hash (optional, implementation specific)
        "builddate": "2025-05-28 12:00:00 +0000" // Build date (optional, implementation specific)
      }
    // Note: The version information helps clients determine compatibility and available features

  # Block Info Commands

  Method getbestblockhash // Returns the hash of the best (tip) block in the longest blockchain.
    Params
      []
    Result
      "000000000000000000035c80f3a4414b6da66e9ef98f8122e89691d8c6d2cbe0" // The hash of the best (tip) block in the longest blockchain

  Method getblockhash // Returns hash of block in best-block-chain at height.
    Params
      [
        123 // Block height
      ]
    Result
      "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f" // The block hash

  Method getdifficulty // Returns the proof-of-work difficulty as a multiple of the minimum difficulty.
    Params
      []
    Result
      1.0 // The difficulty as a multiple of the minimum difficulty

  Method getblockheader // Returns information about block header from hash.
    Params
      [
        "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f", // Block hash
        true // Verbose output (true=json object, false=hex-encoded data), default=true
      ]
    Result
      @BlockHeader

  Method getblockbyheight // Returns information about a block from the block height.
    Params
      [
        123, // Block height
        1, // Verbosity (0=hex, 1=json, 2=json with tx detail), default=1
        true // Show transaction details (only relevant to verbosity > 0), default=false
      ]
    Result
      @BlockHeader

  Method getblock // Returns information about a block from the block hash.
    Params
      [
        "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f", // Block hash
        1 // Verbosity (0=hex, 1=json, 2=json with tx detail), default=1
      ]
    Result
      @BlockHeader

  Method getchaintips // Returns information about all known tips in the block tree.
    Params
      []
    Result
      [
        {
          "height": 680000, // Block height of this chain tip
          "hash": "000000000000000000035c80f3a4414b6da66e9ef98f8122e89691d8c6d2cbe0", // Block hash of this chain tip
          "branchlen": 0, // Zero for main chain, otherwise length of branch connecting the tip to the main chain
          "status": "active" // Status of the chain (active, valid-fork, valid-headers, headers-only, invalid)
        },
        {
          "height": 679999, // Block height of this chain tip
          "hash": "00000000000000000002a7c4c1e48d76c5a37902165a270156b7a8d72728a054", // Block hash of this chain tip
          "branchlen": 1, // Length of branch connecting this tip to the main chain
          "status": "valid-fork" // Status indicating this is a valid fork of the main chain
        }
      ]
    // Note: Returns information about all known tips in the block tree including the main chain and any side chains
    // Possible status values:
    // - "invalid": This branch contains at least one invalid block
    // - "headers-only": Not all blocks for this branch are available, but the headers are valid
    // - "valid-headers": All blocks are available for this branch, but they were never fully validated
    // - "valid-fork": This branch is not part of the active chain, but is fully validated
    // - "active": This is the tip of the active main chain, which is certainly valid

  # Transaction Commands

  Method createrawtransaction // Creates a raw transaction without signing it.
    Params
      [
        [
          {
            "txid": "a08e6907dbdb6e3c44a10b901b31f2f95e2ff8c732320bdb5d7105b98b2f96a0",
            "vout": 0
          }
        ],
        {
          "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa": 0.01
        }
      ]
    Result
      "0200000001a0962f8bb905715ddb0b3232c7f82f5ef9f2311b900ba1443c6edbdb0769e60a0000000000ffffffff0140420f00000000001976a914ae56cbe296ec9035fc4a284b6a42555abb27cb5a88ac00000000" // The hex-encoded raw transaction

  Method sendrawtransaction // Submits raw transaction to local node and network.
    Params
      [
        "0200000001a0962f8bb905715ddb0b3232c7f82f5ef9f2311b900ba1443c6edbdb0769e60a0000000000ffffffff0140420f00000000001976a914ae56cbe296ec9035fc4a284b6a42555abb27cb5a88ac00000000", // The hex string of the raw transaction
        true, // Allow high fees, default=false
      ]
    Result
      "a08e6907dbdb6e3c44a10b901b31f2f95e2ff8c732320bdb5d7105b98b2f96a0" // The transaction hash
    // Note: The method performs several validation checks including:
    // - Transaction syntax and structure validation
    // - Script validation rules
    // - Fee policy enforcement (unless allowhighfees=true)
    // - Mempool acceptance rules
    // Common errors: Rejected transaction (code: -26), Missing inputs (code: -25), Already in blockchain (code: -27)

  Method getrawtransaction // Gets raw transaction data.
    Params
      [
        "a08e6907dbdb6e3c44a10b901b31f2f95e2ff8c732320bdb5d7105b98b2f96a0", // The transaction id
        true, // Verbose output (true=json object, false=hex-encoded data), default=false
        "00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09" // Optional block hash for retrieving confirmed transactions efficiently
      ]
    Result
      @RawTransaction // When verbose=true
      // OR
      "0200000001a0962f8bb905715ddb0b3232c7f82f5ef9f2311b900ba1443c6edbdb0769e60a0000000000ffffffff0140420f00000000001976a914ae56cbe296ec9035fc4a284b6a42555abb27cb5a88ac00000000" // When verbose=false
    // Note: Retrieves transactions from both mempool and blockchain. Returns error if transaction not found.


  # Mining Commands

  Method getmininginfo // Returns mining-related information.
    Params
      []
    Result
      {
        "blocks": 680000, // The current block
        "currentblocksize": 4000, // The last block size
        "currentblocktx": 100, // The last block transaction
        "difficulty": 21865558044610.55, // The current difficulty
        "networkhashps": 185700706053323, // The network hashes per second
        "pooledtx": 10 // The size of the mempool
      }

  Method getminingcandidate // Returns data needed to construct a block to work on.
    Params
      [
        true, // Calculate merkle proof (optional), default=false
        1000000 // Coinbase value in satoshis (optional), allows customizing coinbase reward
      ]
    Result
      {
        "id": "12345", // Mining candidate id
        "prevhash": "00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09", // Previous block hash
        "coinbaseValue": 500000000, // Coinbase value in Satoshis
        "version": 536870912, // Block version
        "nBits": "207fffff", // Target difficulty
        "time": 1596223904, // Block time
        "height": 123 // Block height
      }

  Method submitminingsolution // Submits a mining solution to the network.
    Params
      [
        {
          "id": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // Block ID corresponding to a previous getminingcandidate result
          "nonce": 123, // Nonce value that satisfies the proof-of-work requirement
          "coinbase": "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0f5104", // Coinbase transaction data
          "time": 1622802552 // Block timestamp (optional)
        }
      ]
    Result
      true // Whether the solution was accepted
    // Note: Returns true if the solution was accepted, false if invalid
    // Common errors: Block not found (code: -8), Block solution invalid (code: -5), Duplicate block (code: -8)


  Method generate // Generates blocks (for testing purposes).
    Params
      [
        2, // Number of blocks to generate (required)
        1000 // Maximum iterations before giving up, default=1000000
      ]
    Result
      [
        "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f", // Block hash
        "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048" // Block hash
      ]
    // Note: This method is intended primarily for testing and development environments
    // Blocks are generated using local CPU mining and immediately added to the blockchain
    // Rewards are sent to a default address controlled by the node

  Method generatetoaddress // Generates blocks to a specified address (for testing).
    Params
      [
        2, // Number of blocks to generate (required)
        "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa", // Bitcoin address to send coinbase rewards to (required)
        1000 // Maximum iterations before giving up, default=1000000
      ]
    Result
      [
        "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f", // Block hash
        "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048" // Block hash
      ]
    // Note: Similar to generate but allows specifying the beneficiary address for block rewards
    // Intended primarily for testing and development environments
    // Warning: Block rewards will only be spendable after coinbase maturity (100 blocks)

  # Network & Node Info Commands

  Method getblockchaininfo // Returns information about blockchain processing state.
    Params
      []
    Result
      {
        "chain": "main", // Current network name (main, test, regtest)
        "blocks": 680000, // The current number of blocks processed in the server
        "headers": 680000, // The current number of headers we have validated
        "bestblockhash": "000000000000000000035c80f3a4414b6da66e9ef98f8122e89691d8c6d2cbe0", // The hash of the currently best block
        "difficulty": 21865558044610.55, // The current difficulty
        "mediantime": 1620374451, // Median time for the current best block
        "verificationprogress": 0.9999953, // Estimate of verification progress [0..1]
        "initialblockdownload": false, // Estimate of whether this node is in Initial Block Download mode
        "chainwork": "00000000000000000000000000000000000000001f6a65c7cd10e5491b7b7501", // Total amount of work in active chain, in hexadecimal
        "size_on_disk": 379219829822, // The estimated size of the block and undo files on disk
        "pruned": false, // If the blocks are subject to pruning
        "subtree_count": 1024 // Number of active subtrees (Teranode specific)
      }
    // Note: This method provides crucial information about the blockchain's current state
    // The subtree_count field is specific to Teranode's implementation, which uses subtrees instead of a traditional mempool

  Method getinfo // Returns general information about the node and blockchain.
    Params
      []
    Result
      {
        "version": 100000, // The server version
        "protocolversion": 70015, // The protocol version
        "blocks": 680000, // The current number of blocks processed
        "timeoffset": 0, // The time offset in seconds
        "connections": 8, // The number of connections
        "proxy": "", // The proxy used by the server
        "difficulty": 21865558044610.55, // The current difficulty
        "testnet": false, // Whether the server is using testnet
        "relayfee": 0.00001, // Minimum relay fee for transactions in BSV/kB
        "errors": "", // Any current errors
        "network": "main", // Current network (main, test, regtest)
        "subtrees": 1024, // Number of active subtrees (Teranode specific)
        "maxblocksize": 4294967295 // Maximum block size in bytes
      }
    // Note: This is a convenience method that returns a summary of node state
    // For more detailed information, use the specific commands like getblockchaininfo, getnetworkinfo, etc.
    // The subtrees field is specific to Teranode's implementation which uses subtrees instead of a traditional mempool

  Method getpeerinfo // Returns data about each connected network node.
    Params
      []
    Result
      [
        {
          "id": 3,
          "addr": "192.168.1.113:8333",
          "addrlocal": "192.168.0.2:51624",
          "services": "000000000000000d",
          "lastsend": 1622802552,
          "lastrecv": 1622802552,
          "bytessent": 368763,
          "bytesrecv": 9380352,
          "conntime": 1614783911,
          "timeoffset": 0,
          "pingtime": 0.000631,
          "minping": 0.000454,
          "version": 70015,
          "subver": "/Bitcoin SV:1.0.7/",
          "inbound": false,
          "startingheight": 675294,
          "banscore": 0,
          "synced_headers": 680000,
          "synced_blocks": 680000
        }
      ]

  Method setban // Attempts to add or remove an IP/Subnet from the banned list.
    Params
      [
        "192.168.1.113", // IP/Subnet (can be IP or subnet CIDR notation)
        "add", // Command: 'add' to add to the banned list, 'remove' to remove from the banned list
        86400, // Ban time in seconds (optional)
        false // Optional parameter - 'true' ignores the ban time argument and uses the absolute time when formatting the date
      ]
    Result
      null // No data returned

  Method isbanned // Checks if a network address is currently banned.
    Params
      [
        "192.168.1.113" // IP/Subnet to check
      ]
    Result
      {
        "banned": true,
        "expire": 1683388902
      }

  Method listbanned // Returns list of all banned IP addresses and subnets.
    Params
      []
    Result
      [
        {
          "address": "192.168.1.113/32",
          "ban_created": 1622802552,
          "ban_reason": "manually added",
          "banned_until": 1622888952
        }
      ]

  Method clearbanned // Removes all IP address bans.
    Params
      []
    Result
      null // No data returned

  # Block Management Commands

  Method invalidateblock // Permanently marks a block as invalid, forcing a chain reorganization.
    Params
      [
        "00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09" // Block hash to invalidate
      ]
    Result
      null // No data returned
    // Note: When a block is invalidated, the node will:
    // - Mark the specified block as invalid in the block index
    // - Disconnect it and all blocks built on top of it from the active chain
    // - Rewind the chain state to the last valid block before the invalidation point
    // - Attempt to find an alternative chain to follow
    // Administrative operation that requires elevated permissions

  Method reconsiderblock // Removes invalidation status from a block, allowing it to be reconsidered for the blockchain.
    Params
      [
        "00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09" // Block hash to reconsider
      ]
    Result
      null // No data returned
    // Note: This reverses the effect of invalidateblock by:
    // - Removing the specified block from the invalid block list
    // - Triggering revalidation of the block and its descendants
    // - Potentially reorganizing the chain if the reconsidered block belongs to a stronger chain
    // Administrative operation that requires elevated permissions

  # UTXO Control Commands

  Method freeze // Freezes a specific UTXO, preventing it from being spent.
    Params
      [
        "a08e6907dbdb6e3c44a10b901b31f2f95e2ff8c732320bdb5d7105b98b2f96a0", // Transaction ID
        0 // Output index (vout)
      ]
    Result
      true // Whether freeze was successful
    // Note: Frozen UTXOs will be rejected by sendrawtransaction if included as inputs
    // Can only freeze UTXOs that exist in the UTXO set (confirmed transactions)
    // Administrative operation that requires elevated permissions

  Method unfreeze // Unfreezes a previously frozen UTXO.
    Params
      [
        "a08e6907dbdb6e3c44a10b901b31f2f95e2ff8c732320bdb5d7105b98b2f96a0", // Transaction ID
        0 // Output index (vout)
      ]
    Result
      true // Whether unfreeze was successful
    // Note: Only works on UTXOs that were previously frozen with the freeze command
    // Administrative operation that requires elevated permissions
    // Returns false if the UTXO was not previously frozen

  Method reassign // Reassigns ownership of a UTXO to a different address.
    Params
      [
        "a08e6907dbdb6e3c44a10b901b31f2f95e2ff8c732320bdb5d7105b98b2f96a0", // Transaction ID
        0, // Output index (vout)
        "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa" // Destination address
      ]
    Result
      true // Whether reassignment was successful
    // Note: Permanently changes the destination of a UTXO without requiring a transaction
    // Administrative operation that requires elevated permissions
    // Can only reassign UTXOs that exist in the UTXO set (confirmed transactions)
    // Warning: This modifies blockchain state outside of normal consensus rules

  # Help Command

  Method help // Displays help information about RPC commands.
    Params
      [
        "getblock" // Optional command to get specific help for. If omitted, returns list of all commands.
      ]
    Result
      "getblock "hash" ( verbosity )

If verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.
If verbosity is 1, returns an Object with information about block <hash>.
If verbosity is 2, returns an Object with information about block <hash> and information about each transaction.

Arguments:
1. hash          (string, required) The block hash
2. verbosity     (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction data

Result (for verbosity = 0):
"data"           (string) A string that is serialized, hex-encoded data for block 'hash'.

Result (for verbosity = 1):
{
  "hash" : "hash",     (string) the block hash (same as provided)
  "confirmations" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain
  "size" : n,            (numeric) The block size
  ...
}

Result (for verbosity = 2):
{
  ...,
  "tx" : [               (array of json objects)
         {
           ...
         },
         ...
       ]
}

Examples:
> bitcoin-cli getblock "00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09"
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblock", "params": ["00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09"]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/"
      // Help text for the specified command, or list of all commands if no command specified
